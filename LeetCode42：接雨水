给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。

示例：

输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]
输出：6
解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 

提示：

n == height.length
1 <= n <= 2 * 10^4
0 <= height[i] <= 105
看这个数组长度，应该两个for（）是不超过时间限制的。O（n*n）

按照这个示例，第一步先将最大值的下标找出来

int Max = height[0];
        int sum = 0;
        int target;
        for (int i = 0; i < height.size(); i++)
        {
            Max = max(Max, height[i]);
        }
        for (int i = 0; i < height.size(); i++)
        {
            if (Max == height[i])
            {
                target = i;
            }
        }
target是最大值的下标

然后从最左边和最右边向最大值进行收缩

左边：

定义一个max_begin

如果i+1 > i ，将下标为i+1的元素赋值给max_begin

如果i+1 < i ，将max_begin减去i+1的元素

再将所有max_begin减去的元素之差相加得到最大值左边的接雨水之和。

右边：

定义一个max_end

如果i-1 > i ，将下标为i-1的元素赋值给max_end

如果i-1 < i ，将max_end减去i-1的元素

再将所有max_end减去的元素之差相加得到最大值右边的接雨水之和。

int max_begin = height[0];
        int max_end = height[height.size() - 1];
        for (int i = 0; i < target; i++)
        {
            if (height[i] > max_begin)
            {
                max_begin = height[i];
            }
            else
            {
                sum = sum + (max_begin - height[i]);
            }
        }
        for (int i = height.size() - 1; i > target; i--)
        {
            if (height[i] > max_end)
            {
                max_end = height[i];
            }
            else
            {
                sum = sum + (max_end - height[i]);
            }
        }

最后直接返回相加之和sum即可

完整代码：

class Solution
{
public:
    int trap(vector<int> &height)
    {
        int Max = height[0];
        int sum = 0;
        int target;
        for (int i = 0; i < height.size(); i++)
        {
            Max = max(Max, height[i]);
        }
        for (int i = 0; i < height.size(); i++)
        {
            if (Max == height[i])
            {
                target = i;
            }
        }
        int max_begin = height[0];
        int max_end = height[height.size() - 1];
        for (int i = 0; i < target; i++)
        {
            if (height[i] > max_begin)
            {
                max_begin = height[i];
            }
            else
            {
                sum = sum + (max_begin - height[i]);
            }
        }
        for (int i = height.size() - 1; i > target; i--)
        {
            if (height[i] > max_end)
            {
                max_end = height[i];
            }
            else
            {
                sum = sum + (max_end - height[i]);
            }
        }
        return sum;
    }
};

————————————————
