题目：

给你一个下标从 0 开始的字符串数组 garbage ，其中 garbage[i] 表示第 i 个房子的垃圾集合。garbage[i] 只包含字符 'M' ，'P' 和 'G' ，但可能包含多个相同字符，每个字符分别表示一单位的金属、纸和玻璃。垃圾车收拾 一 单位的任何一种垃圾都需要花费 1 分钟。

同时给你一个下标从 0 开始的整数数组 travel ，其中 travel[i] 是垃圾车从房子 i 行驶到房子 i + 1 需要的分钟数。

城市里总共有三辆垃圾车，分别收拾三种垃圾。每辆垃圾车都从房子 0 出发，按顺序 到达每一栋房子。但它们 不是必须 到达所有的房子。

任何时刻只有 一辆 垃圾车处在使用状态。当一辆垃圾车在行驶或者收拾垃圾的时候，另外两辆车 不能 做任何事情。

请你返回收拾完所有垃圾需要花费的 最少 总分钟数。

示例 1：

输入：garbage = ["G","P","GP","GG"], travel = [2,4,3]
输出：21
解释：
收拾纸的垃圾车：
1. 从房子 0 行驶到房子 1
2. 收拾房子 1 的纸垃圾
3. 从房子 1 行驶到房子 2
4. 收拾房子 2 的纸垃圾
收拾纸的垃圾车总共花费 8 分钟收拾完所有的纸垃圾。
收拾玻璃的垃圾车：
1. 收拾房子 0 的玻璃垃圾
2. 从房子 0 行驶到房子 1
3. 从房子 1 行驶到房子 2
4. 收拾房子 2 的玻璃垃圾
5. 从房子 2 行驶到房子 3
6. 收拾房子 3 的玻璃垃圾
收拾玻璃的垃圾车总共花费 13 分钟收拾完所有的玻璃垃圾。
由于没有金属垃圾，收拾金属的垃圾车不需要花费任何时间。
所以总共花费 8 + 13 = 21 分钟收拾完所有垃圾。
示例 2：

输入：garbage = ["MMM","PGM","GP"], travel = [3,10]
输出：37
解释：
收拾金属的垃圾车花费 7 分钟收拾完所有的金属垃圾。
收拾纸的垃圾车花费 15 分钟收拾完所有的纸垃圾。
收拾玻璃的垃圾车花费 15 分钟收拾完所有的玻璃垃圾。
总共花费 7 + 15 + 15 = 37 分钟收拾完所有的垃圾。
 

提示：

2 <= garbage.length <= 10^5
garbage[i] 只包含字母 'M' ，'P' 和 'G' 。
1 <= garbage[i].length <= 10
travel.length == garbage.length - 1
1 <= travel[i] <= 100

思路：每个单个子数组都是最多含有字母M P G，找到收集完所有垃圾需要花费多少时间。

花费时间只有两种可能，1是收垃圾花费一分钟，2是去往下一个垃圾站需要的时间。

我们直接定义a、b、c来代表三个字母M P G在整个数组中存在多少次（一个字符串含有两个相同字母按照一个对待）；定义x、y、z来表示每种垃圾的最后位置，可以计算出路上需要花费的时间。定义sum1，sum2，sum3来算出每种垃圾花费路上时间的总和，最后返回收集垃圾的时间加上路上的时间 之和。

        int a=0;
        int b=0;
        int c=0 ; //找到每种垃圾有多少个位置
        int x=0; 
        int y=0;
        int z=0; //找到每种垃圾的最后的下标值
        int sum1=0;
        int sum2=0;
        int sum3=0;
然后找出每种垃圾的最后下标；还有每种垃圾有多少堆（一堆中的一种垃圾需要花费1分钟）

        for(int i=0;i<garbage.size();i++)
        {
            for(int j=0;j<garbage[i].size();j++)
            {
                if(garbage[i][j]=='M')
                {
                    a++;
                    x=i;
                }
            }
        }
            for(int i=0;i<garbage.size();i++)
        {
            for(int j=0;j<garbage[i].size();j++)
            {
                if(garbage[i][j]=='P')
                {
                    b++;
                    y=i;
                }
            }
        }
         for(int i=0;i<garbage.size();i++)
        {
            for(int j=0;j<garbage[i].size();j++)
            {
                if(garbage[i][j]=='G')
                {
                    c++;
                    z=i;
                }
            }
        }

最后用给的travel数组就算每种垃圾花在路上的时间。

        for(int i=0;i<x;i++)
        {
            sum1=sum1+travel[i];
        }
            for(int i=0;i<y;i++)
        {
            sum2=sum2+travel[i];
        }
            for(int i=0;i<z;i++)
        {
            sum3=sum3+travel[i];
        }
最后返回所有的总和。

完整代码：

class Solution {
public:
    int garbageCollection(vector<string>& garbage, vector<int>& travel) {
        int a=0;
        int b=0;
        int c=0 ; //找到每种垃圾有多少个位置
        int x=0; 
        int y=0;
        int z=0; //找到每种垃圾的最后的下标值
        int sum1=0;
        int sum2=0;
        int sum3=0;
        for(int i=0;i<garbage.size();i++)
        {
            for(int j=0;j<garbage[i].size();j++)
            {
                if(garbage[i][j]=='M')
                {
                    a++;
                    x=i;
                }
            }
        }
            for(int i=0;i<garbage.size();i++)
        {
            for(int j=0;j<garbage[i].size();j++)
            {
                if(garbage[i][j]=='P')
                {
                    b++;
                    y=i;
                }
            }
        }
         for(int i=0;i<garbage.size();i++)
        {
            for(int j=0;j<garbage[i].size();j++)
            {
                if(garbage[i][j]=='G')
                {
                    c++;
                    z=i;
                }
            }
        }
        for(int i=0;i<x;i++)
        {
            sum1=sum1+travel[i];
        }
            for(int i=0;i<y;i++)
        {
            sum2=sum2+travel[i];
        }
            for(int i=0;i<z;i++)
        {
            sum3=sum3+travel[i];
        }
        int target=a+b+c+sum1+sum2+sum3;
      return target;
    }
};

————————————————
