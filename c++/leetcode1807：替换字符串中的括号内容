题目表述：

给你一个字符串 s ，它包含一些括号对，每个括号中包含一个 非空 的键。

比方说，字符串 "(name)is(age)yearsold" 中，有 两个 括号对，分别包含键 "name" 和 "age" 。
你知道许多键对应的值，这些关系由二维字符串数组 knowledge 表示，其中 knowledge[i] = [keyi, valuei] ，表示键 keyi 对应的值为 valuei 。

你需要替换 所有 的括号对。当你替换一个括号对，且它包含的键为 keyi 时，你需要：

将 keyi 和括号用对应的值 valuei 替换。
如果从 knowledge 中无法得知某个键对应的值，你需要将 keyi 和括号用问号 "?" 替换（不需要引号）。
knowledge 中每个键最多只会出现一次。s 中不会有嵌套的括号。

请你返回替换 所有 括号对后的结果字符串。

示例 1：

输入：s = "(name)is(age)yearsold", knowledge = [["name","bob"],["age","two"]]
输出："bobistwoyearsold"
解释：
键 "name" 对应的值为 "bob" ，所以将 "(name)" 替换为 "bob" 。
键 "age" 对应的值为 "two" ，所以将 "(age)" 替换为 "two" 。
示例 2：

输入：s = "hi(name)", knowledge = [["a","b"]]
输出："hi?"
解释：由于不知道键 "name" 对应的值，所以用 "?" 替换 "(name)" 。
示例 3：

输入：s = "(a)(a)(a)aaa", knowledge = [["a","yes"]]
输出："yesyesyesaaa"
解释：相同的键在 s 中可能会出现多次。
键 "a" 对应的值为 "yes" ，所以将所有的 "(a)" 替换为 "yes" 。
注意，不在括号里的 "a" 不需要被替换。
 

提示：

1 <= s.length <= 1e5
0 <= knowledge.length <= 1e5
knowledge[i].length == 2
1 <= keyi.length, valuei.length <= 10
s 只包含小写英文字母和圆括号 '(' 和 ')' 。
s 中每一个左圆括号 '(' 都有对应的右圆括号 ')' 。
s 中每对括号内的键都不会为空。
s 中不会有嵌套括号对。
keyi 和 valuei 只包含小写英文字母。
knowledge 中的 keyi 不会重复。

解题思路：

        ​​​knowledge中字符串与字符串一一对应，直接使用哈希算法！

        只需要将knowledge中的元素存放到hashmap（在c++中推荐使用unordered_map）中使其元素之间一一相对。while循环或者for循环遍历字符串S，对于  '(' 下标定义成index_1， ')' 定义成index_2,将中间的字符串包括'（' , ' ）'，替换成hashmap映射的字符串。

ps：

        在程序中，s+=str 运算速度 s=s+str快一些！

解题代码1：

class Solution {
public:
    string evaluate(string s, vector<vector<string>>& knowledge) {
        unordered_map<string,string>mp;//通过95/105案例（超出时间限制）
        for(int i=0;i<knowledge.size();i++)
        {
            mp[knowledge[i][0]]=knowledge[i][1];
        }
        int index_1;
        int index_2;
        for(int i=0;i<s.length();i++)
        {
            if(s[i]=='(') index_1=i;
            if(s[i]==')')
            {
                index_2=i;
                string str=s.substr(0,index_1);
                string st =s.substr(index_1+1,index_2-index_1-1);
                s=s.substr(index_2+1,s.length()-index_2);
                auto it=mp.find(st);
                if(it==mp.end())
                {
                    s=str+"?"+s;
                }
                else
                {
                    s=str+mp[st]+s;
                }
                i=i-st.length()-1;
            }
        }
        return s;
    }
};

解题代码2：

class Solution {
public:
string evaluate(string s, vector<vector<string>>& knowledge) {
        unordered_map<string,string>Q;
        for(int i=0;i<knowledge.size();i++)Q[knowledge[i][0]]=knowledge[i][1];
        string ans="";
        int i=0;
        int n=s.size();
        bool inBracket=false;
        int L=0;
        while(i<n){
            if(inBracket==false && s[i]!='(' && s[i]!=')'){
                ans.push_back(s[i++]);
                continue;
            }
            if(s[i]=='('){
                inBracket=true;
                L=i+1;
            }else if(s[i]==')'){
                string key=s.substr(L,i-L);
                if(Q.count(key)){
                    // ans=ans+Q[key]; 超时写法
                    ans+=Q[key];
                }else{
                    // ans=ans+"?";超时写法
                    ans+="?";
                }
                inBracket=false;
            }
            i++;
        }
        return ans;
    }
};
