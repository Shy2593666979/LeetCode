题目表述：

给你一个数组 nums ，数组中只包含非负整数。定义 rev(x) 的值为将整数 x 各个数字位反转得到的结果。比方说 rev(123) = 321 ， rev(120) = 21 。我们称满足下面条件的下标对 (i, j) 是 好的 ：

0 <= i < j < nums.length
nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])
请你返回好下标对的数目。由于结果可能会很大，请将结果对 109 + 7 取余 后返回。

示例 1：

输入：nums = [42,11,1,97]
输出：2
解释：两个坐标对为：
 - (0,3)：42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121 。
 - (1,2)：11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12 。
示例 2：

输入：nums = [13,10,35,24,76]
输出：4
 

提示：

1 <= nums.length <= 1e5
0 <= nums[i] <= 1e9

解题思路：

        题目不难理解，我相信如果nums数组长度比较小的话，直接可以使用两个for循环（暴力解法）写出来，不过这道题数组长度给出来就说明需要时间复杂度O（N）。

        通过这个式子nums[i] + rev(nums[j]) == nums[j] + rev(nums[i]) 的交换可以得到：                        nums[i] - rev(nums[i]) == nums[j] - rev(nums[ j ])

        定义一个哈希（unordered_map）计数，当遍历nums数组时，每次都将mp【nums[i]-rev[nums[i]】加上对mod（1000000007）取余，然后再mp【nums[i]-rev[nums[i]】+1。

解题代码：

class Solution {
public:
    int countNicePairs(vector<int>& nums) {
        int cnt=0;
        unordered_map<int,int>mp;
        for(int i=0;i<nums.size();i++)
        {
            int temp=nums[i];
            int target=0;
            while(temp!=0)
            {
                int x=temp%10;
                temp=temp/10;
                target=target*10+x;
            }
            cnt=(cnt+mp[nums[i]-target])%1000000007;
            mp[nums[i]-target]++;
        }
        return cnt;
    }
};
