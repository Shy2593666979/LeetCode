题目表述：

        给你一个字符串 s ，返回 s 中 同构子字符串 的数目。由于答案可能很大，只需返回对 109 + 7 取余 后的结果。

同构字符串 的定义为：如果一个字符串中的所有字符都相同，那么该字符串就是同构字符串。

子字符串 是字符串中的一个连续字符序列。

示例 1：

输入：s = "abbcccaa"
输出：13
解释：同构子字符串如下所列：
"a"   出现 3 次。
"aa"  出现 1 次。
"b"   出现 2 次。
"bb"  出现 1 次。
"c"   出现 3 次。
"cc"  出现 2 次。
"ccc" 出现 1 次。
3 + 1 + 2 + 1 + 3 + 2 + 1 = 13
示例 2：

输入：s = "xy"
输出：2
解释：同构子字符串是 "x" 和 "y" 。
示例 3：

输入：s = "zzzzz"
输出：15
 

提示：

1 <= s.length <= 10^5
s 由小写字符串组成

解题思路：

        对于s = "abbcccaa"  当单个字符a出现时，就可以在字符串数目上加1，当字符串bb出现，字符串字符需要加上1+2。字符串ccc出现时，同构字符串数目就是加的1+2+3.所以可以找到如果单个字符就是加1，n个字符连起来就是1+2+3+...+n。

        利用双指针方法，一个在前，一个在后，找到一个字符相同的字符串，通过字符的长度来算出需要加的同构子字符串的数目，最后对结果取余。

        ps：这里需要注意的就是字符串最长为100000，1+2+3+4+...+100000是大于int类型的，所以定义时需要定义long long数据类型。

解题代码：

class Solution {
public:
    long long fun(int n)
    {
        long long target=0;
        for(int i=0;i<n+1;i++)
        {
            target=target+i;
        }
        return target;
    }
    int countHomogenous(string s) {
        int start=0;
        int end=0;
        long long count=0;
        while(end<s.length())
        {
            if(s[start]==s[end])
            {
                end++;
            }
            else 
            {
                count=count+fun(end-start);
                count=count%(1000000007);
                start=end;
            }
        }
        count=count+fun(end-start);
        count=count%(1000000007);
        return count;
    }
};
————————————————
