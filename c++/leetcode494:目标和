题目表述：

      给你一个整数数组 nums 和一个整数 target 。

向数组中的每个整数前添加 '+' 或 '-' ，然后串联起所有整数，可以构造一个 表达式 ：

        例如，nums = [2, 1] ，可以在 2 之前添加 '+' ，在 1 之前添加 '-' ，然后串联起来得到表达式 "+2-1" 
返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。

示例 1：

输入：nums = [1,1,1,1,1], target = 3
输出：5
解释：一共有 5 种方法让最终目标和为 3 。
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3
示例 2：

输入：nums = [1], target = 1
输出：1
 

提示：

1 <= nums.length <= 20
0 <= nums[i] <= 1000
0 <= sum(nums[i]) <= 1000
-1000 <= target <= 1000

解题思路：

        思路一：因为每个元素都可以分成取或者不取，所以可以使用回溯算法，通过每个元素的加减来找出有多少可以达到目标和的方法数。

        思路二：01背包问题，找到nums数组中需要加的总和，int cnt=sum+target除以二，前提是target绝对值大于sum，且cnt在未除2前判断是否有余数，有的话直接返回0。

思路一（超时运算）：

class Solution {
public:
    vector<int>path;
    int count=0;
    void dfs(vector<int>nums,int target,int startIndex)
    {
        if(accumulate(path.begin(),path.end(),0)==target)
        {
            count++;
            //return ;
        }
        if(accumulate(path.begin(),path.end(),0)>target)
        {
            return ;
        }
        for(int i=startIndex;i<nums.size();i++)
        {
            path.push_back(nums[i]);
            dfs(nums,target,i+1);
            path.pop_back();
        }
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum=accumulate(nums.begin(),nums.end(),0);
        int cnt=(sum+target);
        if(cnt%2==1||abs(target)>sum) return 0;
        cnt=cnt/2;
        dfs(nums,cnt,0);
        return count;
    }
};

leetcode官方题解（几乎超时）：

class Solution {
public:
    int count = 0;
 
    int findTargetSumWays(vector<int>& nums, int target) {
        backtrack(nums, target, 0, 0);
        return count;
    }
 
    void backtrack(vector<int>& nums, int target, int index, int sum) {
        if (index == nums.size()) {
            if (sum == target) {
                count++;
            }
        } else {
            backtrack(nums, target, index + 1, sum + nums[index]);
            backtrack(nums, target, index + 1, sum - nums[index]);
        }
    }
};

思路二解题代码：

class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) {
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) sum += nums[i];
        if (abs(S) > sum) return 0; // 此时没有方案
        if ((S + sum) % 2 == 1) return 0; // 此时没有方案
        int bagSize = (S + sum) / 2;
        vector<int> dp(bagSize + 1, 0);
        dp[0] = 1;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = bagSize; j >= nums[i]; j--) {
                dp[j] += dp[j - nums[i]];
            }
        }
        return dp[bagSize];
    }
};

————————————————
