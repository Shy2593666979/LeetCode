题目：

给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使得出现次数超过两次的元素只出现两次 ，返回删除后数组的新长度。

不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

示例  ：

输入：nums = [0,0,1,1,1,1,2,3,3]
输出：7, nums = [0,0,1,1,2,3,3]
解释：函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。 不需要考虑数组中超出新长度后面的元素。

提示：

1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
nums 已按升序排列
题目中比较重要的词已经用黑体标记出来了，不能使用其他的数组空间，只能在原地进行删改

思路一：

可以直接用两个for（），如果超过有两个相等的元素后，将后面的元素删除掉。

思路二：

用一个for（），利用统计count（）库函数，进行每个元素的统计，如果个数大于2，将多余的元素删除。

完整代码：

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int len=nums.size();
        for(int i=0;i<nums.size();i++)
        {
            int ret=count(nums.begin(),nums.end(),nums[i]);
            if(ret>2)
            {
                nums.erase(nums.begin()+i);
                i=i-1;
            }
        }
        return nums.size();
    }
};

count（）库函数是属于C++——STL中的一种算法，各位读者不妨看一下这篇关于vector及各种高级STL的知识http://t.csdn.cn/RID11

int ret=count（）是统计当前相同元素的个数，如果大于2，将其删除。直到等于为止。

for（）中有 i=i-1，因为erase（）删除某一元素后，后一元素会将自动补齐，所以再将原来下标的位置进行一次遍历。
————————————————
