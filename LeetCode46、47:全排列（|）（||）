题目：

LeetCode46：给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。

示例 ：

输入：nums = [1,2,3]
输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

提示：

1 <= nums.length <= 6
-10 <= nums[i] <= 10
nums 中的所有整数 互不相同

题目的意思就是将集合内所有元素打乱顺序重新排列顺序，相同的元素，不同的顺序也是不一样。

思路一：将集合内各元素按照一定顺序进行交换元素，然后用二阶容器vector返回

思路二：找到一个具有可以随机打乱元素顺序的库函数（类似于随机数种子），进行一定次数的打乱后，再将相同顺序的集合删除掉。

思路一其实是一种很好的算法，大家可以尝试解题

下面就来给大家说一下思路二的库函数     random_shuffle(v.begin(),v.end());

括号内是vector起始位——vector的终点位

这个库函数是属于C++中STL算法（algorithm）大家感兴趣的可以看看这篇文章http://t.csdn.cn/RID11

前面已经说了，要进行一定次数的打乱顺序，才能得到正确结果，为保证一次成功，就直接for（）10000次，这样出现错误的概率几乎为0

完整代码：

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
    vector<int> vet;
    vector<vector<int>> v;
    vet.assign(nums.begin(),nums.end());
    for(int i=0;i<10000;i++)
    {
        random_shuffle(vet.begin(),vet.end());
        v.push_back(vet);
    }
    sort(v.begin(), v.end());                      //排序
    v.erase(unique(v.begin(), v.end()), v.end());  //将重复的元素删除
    return v;
 
    }
};

题目：

LeetCode47：给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。

示例 ：

输入：nums = [1,1,2]
输出：
[[1,1,2],[1,2,1],[2,1,1]]
跟46题不一样的是，这个是有重复元素的，但是这样也阻挡不了这个随机排列库函数的使用！

完整代码：

class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
    vector<int> vet;
    vector<vector<int>> v;
    vet.assign(nums.begin(),nums.end());
    for(int i=0;i<10000;i++)
    {
        random_shuffle(vet.begin(),vet.end());
        v.push_back(vet);
    }
    sort(v.begin(), v.end());
    v.erase(unique(v.begin(), v.end()), v.end());
    return v;
 
    }
};

本篇文章到这里就结束了，两道题都是用的思路二，基本没什么逻辑思维
————————————————
